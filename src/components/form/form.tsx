import { useState } from "react"
import { 
  Divider, 
  FormContainer, 
  Input, 
  Label, 
  ResetButton, 
  Title, 
  TitleContainer, 
  ValidateButton, 
  Error, 
  MultilineInput, 
  CheckboxLabel, 
  CheckboxInput, 
  ButtonContainer, 
  Button 
} from "./form.styled";

interface IErrors {
  id?: string,
  comment?: string,
}

export const Form = () => {
  const [id, setID] = useState<string>('');
  const [comment, setComment] = useState<string>('');
  const [isUserAgree, setIsUserAgree] = useState<boolean>(false);

  const [errors, setErrors] = useState<IErrors>({})

  const handleValidate = () => {
    const localErrors = validate()

    setErrors(localErrors);
  }

  const handleChangeIsUserAgree = () => {
    setIsUserAgree(!isUserAgree);
  }

  const handleFocus = (field: keyof IErrors) => () => {
    setErrors(prevErrors => {
      const nextErrors = {...prevErrors}
      delete nextErrors[field]

      return nextErrors
    })
  }

  const validate = () => {
    let localErrors: IErrors = {}

    if (!id.trim().length) {
      localErrors.id = `–ü–æ–ª–µ "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É" –æ–±–æ–≤'—è–∑–∫–æ–≤–µ`
    } 

    const idNumber = Number(id.trim());
    if (isNaN(idNumber)) {
      localErrors.id = `–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ–º`
    }

    if (!comment.trim().length) {
      localErrors.comment = `–ü–æ–ª–µ "–ö–æ–º–µ–Ω—Ç–∞—Ä" –æ–±–æ–≤'—è–∑–∫–æ–≤–µ`
    }

    if (comment.trim().length > 20) {
      localErrors.comment = `–ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤`
    }

    return localErrors
  }
  
  const handleSend = () => {
    console.log()

    const localErrors = validate()

    const hasErrors = Object.values(localErrors).length

    if(hasErrors) {
      console.log(localErrors)
      setErrors(localErrors)
    }
    else {
      window.alert(`
        –§–æ—Ä–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!

        ID —Ç–æ–≤–∞—Ä—É -> ${id}
        –í—ñ–¥–≥—É–∫ -> ${comment}
      `);
      resetForm()
    }
  }

  const resetForm = () => {
    setID('')
    setComment('')
    setIsUserAgree(false)
    setErrors({})
  }

  return (
    <FormContainer>
      <TitleContainer>
        <ValidateButton onClick={handleValidate}>üìù</ValidateButton>
        <Title>–í—ñ–¥–≥—É–∫</Title>
        <ResetButton onClick={resetForm}>‚ü≥</ResetButton>
      </TitleContainer>

      <Divider />

      <Label>–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É</Label>
      <Input
        placeholder="–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É (—á–∏—Å–ª–æ)"
        value={id}
        onChange={event => setID(event.target.value)}
        hasErrors={!!errors.id}
        onFocus={handleFocus('id')}
      />
      {errors.id && <Error>{errors.id}</Error>}

      <Divider />

      <Label>–ö–æ–º–µ–Ω—Ç–∞—Ä</Label>
      <MultilineInput
        placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É"
        value={comment}
        onChange={event => setComment(event.target.value)}
        hasErrors={!!errors.comment}
        onFocus={handleFocus('comment')}
      />
      {errors.comment && <Error>{errors.comment}</Error>}

      <Divider />

      <CheckboxLabel>
        <CheckboxInput 
          type="checkbox" 
          checked={isUserAgree}
          onChange={handleChangeIsUserAgree}
        />
        –Ø –ø–æ–≥–æ–¥–∂—É—é—Ç—å –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —ñ–º–µ–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
      </CheckboxLabel>

      <Divider />

      <ButtonContainer>
        <Button 
          onClick={handleSend}
          disabled={!isUserAgree}
        >
          –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        </Button>
      </ButtonContainer>
    </FormContainer>
  )
}
